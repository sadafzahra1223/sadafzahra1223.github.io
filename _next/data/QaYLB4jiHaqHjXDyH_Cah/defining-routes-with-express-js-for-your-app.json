{"pageProps":{"userId":1,"id":3,"slug":"defining-routes-with-express-js-for-your-app","title":"Defining Routes with Express JS for your App","description":"Before starting to write code for your application, taking some time to think about its basic architecture helps to give it a good structure to work with...","body":"<br><br><p class='fs-5 mb-4'>Before starting to write code for your application, taking some time to think about its basic architecture helps to give it a good structure to work with.</p><p class='fs-5 mb-4'>Most Front-end developers will start to write code for their application from the browser. But it helps to know how to setup a simple back-end to handle page routing and also allowing the browser to make requests like API calls.</p><p class='fs-5 mb-4'>In this article, we explore how to setup simple routes. Each route defined will load a new page when accessed as a URL in the browser.</p><p class='fs-5 mb-4'>Before your begin, make sure you have installed Node JS for your computer’s operating system. Use the following prompt to check if it is already installed or not.</p><code>$ node -v</code><br><br><p class='fs-5 mb-4'>First, setup a project directory. I’m using the Linux command line so I can use the following command to do this.</p><code>$ mkdir project-name</code><br><br><p class='fs-5 mb-4'>Don’t forget to change directory to your project with $ cd project-name . Then initialize your project with npm which is the package manager for node and will install project dependencies like expressjs and setup scripts to test in the browser (this is further described below).</p><code>$ cd project-name<br>$ npm init //I accepted all the default values by pressing enter</code><br><br><p class='fs-5 mb-4'>After initializing your project with npm, you will see a package.json file appear in your project directory. Now install express with the following command. Once installed, you should see the package appear under dependencies in the package.json file.</p><code>$ npm install express --save</code><br><br><p class='fs-5 mb-4'>Create a file called index.js in your project directory and add the following code.</p><code>const express = require('express')<br>const app = express()<br>app.get('/', function (req, res) {res.send('Home Page')})<br>app.get('/page1', function (req, res) {res.send('page1')})<br>app.listen(3000)</code><br><br><p class='fs-5 mb-4'>Above we created an app object that uses the express js framework. We used the get() method available on the object to define a route and send a response to the browser that requested the page. We defined two routes / for the home page and /page1 for any other route that you want to define.<br><br>Finally, listen() method on the app will allow you to access the defined routes from the browser’s address bar. But first you have to run the index.js file like this.</p><code>$ node index.js</code><br><br><p class='fs-5 mb-4'>Or in your package.json file your could add the following script and type npm start in your command prompt to run the script.</p><code>'scripts': {'test': 'echo \"Error: no test specified\" && exit 1', 'start': 'node index.js'},</code><br><br><p class='fs-5 mb-4'>Access the page routes you defined from the browser with the following.</p><code>http://localhost:3000/http://localhost:3000/page1</code>"},"__N_SSG":true}