{"pageProps":{"postList":[{"userId":1,"id":4,"date":"July 27, 2022","slug":"javascript-types","title":"The 7 types in Javascript","description":"Like all programming languages, JavaScript has types. But types in JavaScript are not explicitly declared ...","body":"<br><br><p>Like all programming languages, JavaScript has types. But types in JavaScript are not explicitly declared. JavaScript decides on its type dynamically based on context. Understanding types helps you debug code many code errors are type related. Below see how to declare and find out a type in JavaScript.<br><br>First to store a value in a JavaScript variable.<br><pre><code>var example = 123</code></pre><br>Then to find out its type use <code>typeof</code>. Store type in a new variable and output to console.<br><br><pre><code>var findType = typeof example <br>console.log(findType)</code></pre><br>There are seven types in JavaScript. Below I have listed and described each one in more detail.<br><br><p><strong>1. Number </strong><br> A number can be any value that is a 64-bit binary format IEEE 754 value between <code>-2^53 - 1</code> and <code>2^53 - 1</code>. Also <code>infinity</code>, <code>-infinity</code> and <code>NaN</code> are considered number types. Numbers are stored without quotation marks.</p><p><strong>2. String </strong><br> Anything that is stored between a single <code>''</code> or double <code>\"\"</code> quotations marks is considered a string in JavaScript. So <code>'abc'</code> and  <code>\"abc\"</code> would be considered a string. </p><p><strong>3. Object</strong> <br> JavaScript Objects are declared between a parenthesis <code>{}</code> as key value pairs separated by a colon <code>:</code> . Multiple key value pairs can be stored between the parenthesis. See example below. <pre><code>var house= {type:'Flat', address:'500 street road, city'}</code></pre></p><p><strong>4. Boolean </strong><br> The values <code>true</code> and <code>false</code> without quotation marks are considered the two values as a Boolean type. Boolean values are often returned when you perform a comparison operator such as below.<pre><code>51 > 26; // return true 130 === 15; // return false</code></pre><p><strong>5. Undefined </strong><br> Any variable declared in JavaScript which is not assigned a value has the value <code>undefined</code>.</p><p><strong>6. Null </strong><br> In JavaScript <code>null</code> is an assignment value. It can be assigned to a variable as a representation of no value.<p><p><strong>7. Symbol </strong> (new in es6)<br> Symbols in JavaScript are defined in the following way. <pre><code>var example = Symbol(desc);</code></pre><br>They are used as object keys. This has the advantage of avoiding code duplication.</p></p>"},{"userId":1,"id":4,"date":"July 27, 2022","slug":"css-inline-block-elements","title":"What is the difference between Inline and Block elements in HTML?","description":"Block level elements start on a <strong>new line</strong>. <br><br> Common examples are ...","body":"<br><br><p>Block level elements start on a <strong>new line</strong>. <br><br> Common examples are: </p><ul><li>&lt;div&gt;</li><li>&lt;p&gt;</li><li>&lt;h1&gt; -&lt;h6&gt;</li></ul><p>Inline elements don't start on a <strong>new line</strong>.</p><p>They take as much width as necessary where started. </p><p>Common examples are: </p><ul><li>&lt;span&gt;</li><li>&lt;img&gt;</li><li>&lt;a&gt; </li></ul>"},{"userId":1,"id":1,"date":"July 20, 2022","slug":"three-design-principles-for-your-css-layout","title":"Three design principles for your CSS layout","description":"Industry experts agree that typography, spacing and colour form the key basic principles <br> for designing things like layouts ...","body":"<br><br><img width='100%' src='layout.png'/><br><br><p class='fs-5 mb-4'>Industry experts agree that <strong>typography</strong>, <strong>spacing</strong> and <strong>colour</strong> form the key basic principles for designing things like layouts for the web. They are the three ingredients or building blocks to work with to create a cohesive composition.</p><p class='fs-5 mb-4'>In this article, we explore how to create a simple single column layout with these design principles in detail. HTML and CSS will be the technologies that we will use as tools to create this layout. Doing this practice will help you learn key concepts and build your web development skills.</p><h2 class='fw-bolder mb-4 mt-5'>1. Typography</h2><p class='fs-5 mb-4'>To set the type, CSS provides the following properties, <code>font-family</code>, <code>font-size</code>, <code>line-height</code> and <code>font-weight</code>.<br><br>In this example, we are setting the <code>font-family</code> to Helvetica. It is web-safe, well-supported by browsers and very popular. We will set the font weight explicitly. The Helvetica font provides two standard font weights. We will set those explicitly to what the standard typically is <strong>400</strong> for <code>p</code> tag and <strong>700</strong> for <code>h1</code> tag. <p class='fs-5 mb-4'>Typography systems also set a ratio to the font-size and line-height. This is helpful as it helps you build visual hierarchy in your design. A good rule of thumb is to set the line-height to approximately 150% of the font size.</p><code>body {<br>font-family: Helvetica;<br>}<br><br>h1 {<br>font-weight: 700;<br>font-size: 2em;<br>line-height: 3em;<br>}<br><br>p {<br>font-weight: 400;<br>font-size: 1em;<br>line-height: 1.5em;<br>}</code><h2 class='fw-bolder mb-4 mt-5'>2. Spacing</h2><p class='fs-5 mb-4'>A lot of CSS frameworks and libraries use rows and columns to build layouts. In this example, we will are creating a simple layout so we will only work with rows. To implement design specifications like fixed or fluid width and manage the inner and outer spacing around your html elements, it is helpful to understand how the CSS box model works. You can find more information about it here on <a href='https://www.w3schools.com/css/css_boxmodel.asp'>w3schools</a>.</p><p class='fs-5 mb-4'>For this example, we are only specifying the <code>padding</code> property for spacing around the row element. I have added a simple <code>border</code> property to use as a guideline when working with the spacing.</p><code>.row {<br>padding: 0 1em;<br>border: solid 1px black;<br>}</code><h2 class='fw-bolder mb-4 mt-5'>3. Colour</h2><p class='fs-5 mb-4'>We will use a simple monochromatic greyscale colour palette with two combinations: black and white. They also have a sharp contrast and are polar opposites in colour theory. These CSS properties will help us create and apply a dark theme to the html element: <code>colour</code> and <code>background</code>.</p><code>.dark {<br>background: #000;<br>colour: #fff;<br>}</code><p class='fs-5 mb-4'><br>Here is the complete code on Code Pen with the resulting layout.<br><a href='https://codepen.io/Sadaf1223/pen/xxLvRag'>https://codepen.io/Sadaf1223/pen/xxLvRag</a></p>"},{"userId":1,"id":2,"date":"July 20, 2022","slug":"getting-familiar-with-the-basics-of-linux","title":"Getting Familiar with the Basics of Linux","description":"When starting out on your Linux journey, there are a few concepts that are keys to <br> working with Linux successfully ...","body":"<br><br><p class='fs-5 mb-4'>When starting out on your Linux journey, there are a few concepts that are keys to working with Linux successfully. In this article, we take a look at some of them including how space is organised in Linux, some basic shell prompts that are useful to know that come in handy with everyday tasks.</p><h2 class='fw-bolder mb-4 mt-5'>Tree Structure of the Linux File System Hierarchy</h2><p class='fs-5 mb-4'>Linux organizes its space as a file system hierarchy starting with the root folder. All other subfolders are nested inside this <strong>root</strong> folder (denoted as a / in the figure below). This can be visualized as a tree structure. All users have their own folder under the <strong>home</strong> folder. When you first start the Linux shell prompt, you are asked to setup a username and password. This becomes your default directory or <strong>home directory</strong> for all future use.</p><br><img src='file-hierarchy.png'/><br><br><br><p class='fs-5 mb-4'>Use this Linux shell prompt to print the current working directory.</p><code>$ pwd <br>/home/sadafzahra</code><br><p class='fs-5 mb-4'><br><br>To explore and view the contents of your working directory ls.</p><code>$ ls <br>code  data</code><br><br><p class='fs-5 mb-4'>Use this shell prompt to navigate to a specified path in the tree structure.</p><code>$ cd /<i>foldername</i>  </code><br><br><p class='fs-5 mb-4'>To go up one level in the tree structure use the following.</p><code>$ cd ..</code><h2 class='fw-bolder mb-4 mt-5'>Basic Shell Prompts for common File tasks</h2><br><p class='fs-5 mb-4'>Use the following to make a new directory.</p><code>$ mkdir <i>directoryname</i></code><br><br><br><p class='fs-5 mb-4'>To create a file use the following commands or shell prompts</p><code>$ cat > <i>filename</i> <br>// press enter to see file content here<br>// ctrl+ d to escape back into the shell prompt</code><br><br><br><p class='fs-5 mb-4'>To view the contents of a file use this</p><code>$ cat <i>test.txt</i><br>test content shown here</code><br><br><br><p class='fs-5 mb-4'>And to remove a file the following prompts</p><code>$ rm <i>filename</i></code>"},{"userId":1,"id":3,"date":"July 20, 2022","slug":"defining-routes-with-express-js-for-your-app","title":"Defining Routes with Express JS for your App","description":"Before starting to write code for your application, taking some time to think about its <br> basic architecture helps to give it a good structure to work with...","body":"<br><br><p class='fs-5 mb-4'>Before starting to write code for your application, taking some time to think about its basic architecture helps to give it a good structure to work with.</p><p class='fs-5 mb-4'>Most Front-end developers will start to write code for their application from the browser. But it helps to know how to setup a simple back-end to handle page routing and also allowing the browser to make requests like API calls.</p><p class='fs-5 mb-4'>In this article, we explore how to setup simple routes. Each route defined will load a new page when accessed as a URL in the browser.</p><p class='fs-5 mb-4'>Before your begin, make sure you have installed Node JS for your computer’s operating system. Use the following prompt to check if it is already installed or not.</p><code>$ node -v</code><br><br><p class='fs-5 mb-4'>First, setup a project directory. I’m using the Linux command line so I can use the following command to do this.</p><code>$ mkdir <i>project-name</i></code><br><br><p class='fs-5 mb-4'>Don’t forget to change directory to your project with <code>$ cd <i>project-name</i></code>. Then initialize your project with npm which is the package manager for node and will install project dependencies like expressjs and setup scripts to test in the browser (this is further described below).</p><code>$ cd <i>project-name</i><br>$ npm init //I accepted all the default values by pressing enter</code><br><br><p class='fs-5 mb-4'>After initializing your project with npm, you will see a <code>package.json</code> file appear in your project directory. Now install express with the following command. Once installed, you should see the package appear under dependencies in the <code>package.json</code> file.</p><code>$ npm install express --save</code><br><br><p class='fs-5 mb-4'>Create a file called <code>index.js</code> in your project directory and add the following code.</p><code>const express = require('express')<br>const app = express()<br><br>app.get('/', function (req, res) {res.send('Home Page')})<br>app.get('/page1', function (req, res) {res.send('page1')})<br><br>app.listen(3000)</code><br><br><p class='fs-5 mb-4'>Above we created an app object that uses the express js framework. We used the <code>get()</code> method available on the object to <strong>define a route</strong> and send a response to the browser that requested the page. We defined two routes <code>/</code> for the home page and <code>/page1</code> for any other route that you want to define.<br><br>Finally, <code>listen()</code> method on the app will allow you to access the defined routes from the browser’s address bar. But first you have to run the <code>index.js</code> file like this.</p><code>$ node index.js</code><br><br><p class='fs-5 mb-4'>Or in your <code>package.json</code> file your could add the following script and type <code>npm start</code> in your command prompt to run the script.</p><code>'scripts': {<br>'test': 'echo \"Error: no test specified\" && exit 1', <br>'start': 'node index.js'<br>}</code><br><br><p class='fs-5 mb-4'>Access the page routes you defined from the browser with the following.</p><code>http://localhost:3000/<br>http://localhost:3000/page1</code>"}]},"__N_SSG":true}